from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext
from subprocess import call

import os.path as osp
import sys
import setuptools
__version__ = '0.0.1'

MDPSIM_SOURCES = [
    "actions.cc", "client.cc", "domains.cc", "effects.cc", "expressions.cc",
    "formulas.cc", "functions.cc", "parser.cc", "predicates.cc", "problems.cc",
    "rational.cc", "requirements.cc", "states.cc", "strxml.cc", "terms.cc",
    "tokenizer.cc", "types.cc"
]

THIS_DIR = osp.dirname(osp.abspath(__file__))

ext_modules = [
    Extension(
        'mdpsim',
        MDPSIM_SOURCES + ['python/pymdpsim.cc', 'python/wrappers.cc'],
        include_dirs=[
            THIS_DIR, osp.join(THIS_DIR, 'vendor/pybind11-2.2.4/include/')
        ],
        language='c++'),
]


# As of Python 3.6, CCompiler has a `has_flag` method.
# cf http://bugs.python.org/issue26689
def has_flag(compiler, flagname):
    """Return a boolean indicating whether a flag name is supported on
    the specified compiler.
    """
    import tempfile
    with tempfile.NamedTemporaryFile('w', suffix='.cpp') as f:
        f.write('int main (int argc, char **argv) { return 0; }')
        try:
            compiler.compile([f.name], extra_postargs=[flagname])
        except setuptools.distutils.errors.CompileError:
            return False
    return True


def cpp_flag(compiler):
    """Return the -std=c++[11/14] compiler flag.
    The c++14 is prefered over c++11 (when it is available).
    """
    if has_flag(compiler, '-std=c++14'):
        return '-std=c++14'
    elif has_flag(compiler, '-std=c++1y'):
        return '-std=c++1y'
    elif has_flag(compiler, '-std=c++11'):
        return '-std=c++11'
    else:
        raise RuntimeError('Unsupported compiler -- at least C++11 support '
                           'is needed!')


def configure_mdpsim():
    if not osp.exists('Makefile'):
        if not osp.exists('configure'):
            call(['autoreconf', '-i'])
        else:
            print('configure exists, skipping autoreconf')
        call(['./configure'])
    else:
        print('Makefile exists, skipping configure')
    # these are generated by flex/bison
    call(['make', 'parser.cc', 'tokenizer.cc'])


class BuildExt(build_ext):
    """A custom build extension for adding compiler-specific options."""
    c_opts = {
        'msvc': ['/EHsc'],
        'unix': ['-fdiagnostics-color=always', '-fPIC'],
    }

    if sys.platform == 'darwin':
        c_opts['unix'] += ['-stdlib=libc++', '-mmacosx-version-min=10.7']

    def build_extensions(self):
        configure_mdpsim()

        ct = self.compiler.compiler_type
        opts = self.c_opts.get(ct, [])
        if ct == 'unix':
            opts.append('-DVERSION_INFO="%s"' %
                        self.distribution.get_version())
            opts.append(cpp_flag(self.compiler))
            if has_flag(self.compiler, '-fvisibility=hidden'):
                opts.append('-fvisibility=hidden')
            if has_flag(self.compiler, '-flto'):
                opts.append('-flto')
        elif ct == 'msvc':
            opts.append('/DVERSION_INFO=\\"%s\\"' %
                        self.distribution.get_version())
        for ext in self.extensions:
            ext.extra_compile_args = opts
            ext.extra_link_args = opts

        super(BuildExt, self).build_extensions()


with open('README.md', encoding='utf-8') as fp:
    long_description = fp.read()

setup(
    name='mdpsim',
    version=__version__,
    author='Sam Toyer',
    author_email='sam@qxcv.net',
    url='https://gitlab.cecs.anu.edu.au/u5568237/mdpsim',
    description='Python wrapper for MDPSim',
    long_description=long_description,
    ext_modules=ext_modules,
    setup_requires=['pybind11>=2.0.1'],
    install_requires=['pybind11>=2.0.1'],
    cmdclass=dict(build_ext=BuildExt),
    zip_safe=False)
